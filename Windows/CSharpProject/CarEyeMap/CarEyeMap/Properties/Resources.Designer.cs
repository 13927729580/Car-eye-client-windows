//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarEyeMap.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CarEyeMap.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   使用此强类型资源类，为所有资源查找
        ///   重写当前线程的 CurrentUICulture 属性。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 	// 主地图容器
        ///	var MapPanel = null;
        ///	// 当前正在使用的工具
        ///	var CurTool = null;
        ///	// 区域/路线图层
        ///	var AreaLayer = null;
        ///	// 路段图层
        ///	var LineLayer = null;
        ///	// 本地查询工具
        ///	var LocalSearchTool = null;
        ///	// 用户标注集合
        ///	var UserMarkers = [];
        ///
        ///	// 区域显示样式
        ///	var AREA_STYLE = {
        ///		strokeColor: &quot;#de6136&quot;,	//边线颜色。
        ///		fillColor: &quot;#9ac4fd&quot;,	//填充颜色。当参数为空时，圆形将没有填充效果。
        ///		strokeWeight: 2,		//边线的宽度，以像素为单位。
        ///		strokeOpacity: 0.8,		//边线透明度，取值范围0 - 1。
        ///		fillOpacity: 0.6,		//填充的透明度，取值范围0 - 1。
        ///		strokeStyle: &quot;solid&quot;	//边线的样式，solid或dashed。
        ///	}
        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string BdPublic {
            get {
                return ResourceManager.GetString("BdPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 // Hashtable构造
        ///function Hashtable() {
        ///	this.count = 0;
        ///	this.contant = new Object();
        ///
        ///	// 添加
        ///	this.add = function (key, value) {
        ///		if (!this.hasKey(key)) {
        ///			this.count++;
        ///		}
        ///
        ///		this.contant[key] = value;
        ///	}
        ///
        ///	// 输出字符串
        ///	this.toString = function () {
        ///		var strHash = &quot;&quot;;
        ///		for (var key in this.contant) {
        ///			strHash += &quot;,&quot; + key + &quot;=&quot; + this.contant[key];
        ///		}
        ///		if (strHash != &quot;&quot;) {
        ///			strHash = strHash.substring(1, strHash.length);
        ///		}
        ///		return strHash;
        ///	}
        ///
        ///	// 清空Hashtable
        ///	this.cl [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Hashtable {
            get {
                return ResourceManager.GetString("Hashtable", resourceCulture);
            }
        }
    }
}
